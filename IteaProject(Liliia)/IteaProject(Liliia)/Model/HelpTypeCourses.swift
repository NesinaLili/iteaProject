//
//  HelpTypeCourses.swift
//  IteaProject(Liliia)
//
//  Created by Лилия on 5/31/19.
//  Copyright © 2019 ITEA. All rights reserved.
//

import Foundation

var javaProgram1 = """
• Обзор языков программирования

    ◦ Обзор парадигм программирования

    ◦ Обзор современных языков программирования

• Понятие алгоритма

    ◦ Роль алгоритма в решении задач

    ◦ Понятие и свойства алгоритма

• Базовые конструкции программирования

    ◦ Понятие синтаксиса и семантики языков программирования

    ◦ Базовые структуры данных

• Основы работы с системой контроля версий

• Функции

    ◦ Описание функции

    ◦ Параметры функций

• Построение простого графического интерфейса (GUI)
"""
var javaProgram2 = """
• Общая характеристика языка Java

    ◦ История языка Java

    ◦ Байт-код

    ◦ Виртуальная машина Java (JVM)

    ◦ Трансляция, интерпретация и компиляция

    ◦ JIT-компиляция

• Типы данных и основные операции с ними

    ◦ Алфавит языка

    ◦ Комментарии

    ◦ Ключевые слова

    ◦ Типы данных: простые(примитивные) и по ссылке

    ◦ Идентификаторы, выбор имен идентификаторов

    ◦ Переменные и константы

• Поток управления

• Массивы

    ◦ Объявления и инициализация массивов, в т.ч. анонимных

    ◦ Линейные массивы

    ◦ Итерация по элементам массива

    ◦ Массивы и присвоения

    ◦ Передача и возврат массивов в/из методов

    ◦ Копирование массивов

    ◦ Класс Arrays: заполнение, сравнение элементов и их сортировка

    ◦ Поиск в массивах

• Строки

• Основы работы с системой контроля версий

• Введение в ООП. Объекты и классы

    ◦ Поля и методы (определение, синтаксис объявления)

    ◦ Спецификаторы доступа public и private

    ◦ Поля классов: инициализация явная и по умолчанию, спецификатор final и константы

    ◦ Доступ к полям и методам

• Отношение между объектами

• Наследование и полиморфизм

• Классы BigInteger и BigDecimal. Основные операции
"""
var javaProgram3 = """
• Утилитные пакеты

    ◦ Форматирование и время java.util, java.time

    ◦ Файловая система, java.io, Externalizable, java.nio

• Java 8. Lambda expressions. Stream API

• GIT. Контроль версий. Локальные системы контроля версий

• Maven. Автоматизация сборки Java проектов

    ◦ Ant the Java legacy build tool

    ◦ Maven POM

• Desktop приложения
"""
var javaProgram4 = """
• Maven/Ant build tools

    ◦ Building with  dependencies and resources

    ◦ Creating box(production) version

    ◦ War-archive

• SOLID (basic principles of object-oriented programming and design)

• Apache Tomcat

    ◦ Installation,first run, short guide

    ◦ Java Server Pages.Model 1

    ◦ Overview

    ◦ Syntax

    ◦ Java code on JSP, imports

• Java Server Pages.Model 2. Expression Language
"""

var cPlusProgram1 = """
• Обзор языков программирования

    ◦ Обзор парадигм программирования

    ◦ Обзор современных языков программирования

• Понятие алгоритма

    ◦ Роль алгоритма в решении задач

    ◦ Понятие и свойства алгоритма

• Базовые конструкции программирования

    ◦ Понятие синтаксиса и семантики языков программирования

    ◦ Базовые структуры данных

• Основы работы с системой контроля версий

• Функции

    ◦ Описание функции

    ◦ Параметры функций

• Построение простого графического интерфейса (GUI)
"""

var cPlusProgram2 = """
• Введение. Немного истории

    ◦ Организация вычислительной системы

    ◦ Организация памяти

    ◦ Языки программирования

    ◦ Машинные языки

    ◦ Языки низкого уровня

    ◦ Языки высокого уровня

    ◦ Трансляторы - компиляторы и интерпретаторы

    ◦ Подходы к разработке ПО

• Состав языка

    ◦ Алфавит

    ◦ Основные составляющие языка

    ◦ Идентификаторы

    ◦ Ключевые слова

• Введение в git

• Переменные и базовые типы данных

• Основные операции языка С ++

• Операторы языка C ++

    ◦ Условный оператор «if else»

    ◦ Тернарный оператор

    ◦ Оператор выбора switch

    ◦ Операторы циклов «for»,«while»,«do while»

    ◦ Операторы «goto», «break», «continue»

    ◦ Пустой оператор

    ◦ Оператор вызова функции

    ◦ Оператор «sizeof»

• Знакомство с типами межпроцессорного взаимодействия
"""

var cPlusProgram3 = """
• Введение в стандартную библиотеку шаблонов

    ◦ Структура библиотеки

    ◦ Основные компоненты. Операторы. Пара

    ◦ Итераторы. Итераторы ввода. Итераторы вывода. Однонаправленные итераторы. Двунаправленные итераторы.

• Контейнеры, алгоритмы, адаптеры

    ◦ Контейнеры. Последовательности. Ассоциативные контейнеры

    ◦ Функциональные объекты. Базовые классы. Арифметические операции. Сравнения. Логические операции

    ◦ Распределители. Требования распределителей. Распределитель по умолчанию

    ◦ Адаптеры. Адаптеры контейнеров. Адаптеры итераторов

• Введение в Qt. Программирование GUI с помощью Qt

    ◦ Основные принципы работы с библиотекой Qt

    ◦ Объектная модель. Метаобъекты, свойства, сигналы и слоты. Типы, варианты, ссылки

    ◦ Обзор классов библиотеки

• Архитектуры приложений

• Работа с системой контроля версий

• Основы создания приложений Qt Quick

• Основы разработки Qt-приложений под Android
"""

var jsProgram1 = """
• Введение в Javascript

    ◦ Общая информация о языке и его особенности

    ◦ Справочники, спецификации и ссылки на них

    ◦ Консоль разработчика

    ◦ Внешние скрипты и порядок их подключения

    ◦ Переменные и правила их именования

• Основные операторы

    ◦ Операторы сравнения и логические значения

    ◦ Условные операторы

    ◦ Логические операторы

    ◦ Конструкция switch

• Циклы и функции

    ◦ Циклы 'for', 'while', 'do...while'

    ◦ Рекурсия и понятие стека

    ◦ Понятие и синтаксис функции

    ◦ Функциональные выражения

    ◦ Области видимости

    ◦ Псевдомассив 'arguments'

    ◦ Функции обратного вызова (callback)

• Массивы

• Объекты

• Работа с Git
"""
var jsProgram2 = """
• Прототипное наследование

    ◦ Прототип объекта

    ◦ Свойство prototype

    ◦ Встроенные классы

    ◦ Функция - конструктор

    ◦ Наследование классов

• Объектно-ориентированное программирование

    ◦ Общая информация про ООП

    ◦ Инкапсуляция

    ◦ Полиморфизм

    ◦ Наследование

    ◦ Абстракция данных

    ◦ Понятие 'класс

• Контекст вызова и замыкания

• Глобальный объект Window и работа с DOM

    ◦ Общая информация про 'window', 'navigator', 'document', 'location', 'history'

    ◦ Навигация по DOM элементам

    ◦ Свойства узлов

    ◦ Добавление и удаление узлов

    ◦ Работа со стилями

• События

• Способы хранения данных в браузере

• HTTP
"""
var jsProgram3 = """
• Шаблоны проектирования

    ◦ Singleton

    ◦ Facade

    ◦ Mediator

    ◦ Decorator

    ◦ Prototype

• Антипаттерны

• Single Page Application

• Typescript
"""
var jsProgram4 = """
• Введение в TypeScript

    ◦ Роль TypeScript

    ◦ TypeScript компилятор

    ◦ Установка TypeScript и редакторы кода

    ◦ Утилита TSLint

• Базовые типы

• Функции

• Дженерики (Общие типы)

• Декораторы

• Паттерны асинхронного кода
"""

var frontendProgram1 = """
• Введение в Javascript

    ◦ Общая информация о языке и его особенности

    ◦ Справочники, спецификации и ссылки на них

    ◦ Консоль разработчика

    ◦ Внешние скрипты и порядок их подключения

    ◦ Переменные и правила их именования

• Основные операторы

    ◦ Операторы сравнения и логические значения

    ◦ Условные операторы

    ◦ Логические операторы

    ◦ Конструкция switch

• Циклы и функции

    ◦ Циклы 'for', 'while', 'do...while'

    ◦ Рекурсия и понятие стека

    ◦ Понятие и синтаксис функции

    ◦ Функциональные выражения

    ◦ Области видимости

• Массивы

• Объекты

• Работа с Git

    ◦ Работа с Git Bash

    ◦ Workflow от создания репозитория до его отправки на удаленный сервер

    ◦ Работа с ветками

    ◦ Работа с конфигурационными файлами
"""

var frontendProgram2 = """
• Прототипное наследование

    ◦ Прототип объекта

    ◦ Свойство prototype

    ◦ Встроенные классы

    ◦ Функция - конструктор

    ◦ Наследование классов

• Объектно-ориентированное программирование

    ◦ Общая информация про ООП

    ◦ Инкапсуляция

    ◦ Полиморфизм

    ◦ Наследование

    ◦ Абстракция данных

    ◦ Понятие 'класс'

• Работа с системой контроля версий

• Формирование страницы в браузере

    ◦ Формирование DOM пошагово

    ◦ Формирование Render Tree

    ◦ Порядок формирования CSSOM

• Способы хранения данных в браузере
• HTTP
"""

var frontendProgram3 = """
• HTML 5

    ◦ Audio

    ◦ Video

    ◦ Data атрибуты

    ◦ Новые семантичные теги

    ◦ Navigator

• CSS 3

    ◦ Адаптивная / кроссбраузерная верстка

    ◦ Медиа запросы

    ◦ Препроцессоры (SCSS, LESS, SASS)

    ◦ Самые попурярные CSS фреймворки (Bootstrap, Foundation)

    ◦ Material Design

    ◦ CSS анимации

• Canvas

    ◦ Работа с API

    ◦ Использование при разработке игр

• АШаблоны проектирования

• Работа с системой контроля версий

• React
"""

var phpProgram1 = """
• Web - приложения и роль языка PHP в работе с ними

    ◦ Как устроен интернет

    ◦ Клиент-серверная архитектура

    ◦ Настройка ПО

• Основы языка PHP

    ◦ Переменные, константы

    ◦ Выражения, операторы

    ◦ Типы данных и приведения типов

    ◦ Управляющие конструкции

• Основы работы с системой контроля версий

• Работа с массивами

• Фильтрация,  валидация данных и работа с формой

    ◦ Работа  с веб-формами

    ◦ Прием и обработка данных от пользователя

    ◦ Фильтрация и валидация данных

    ◦ Основы HTTP протокола

• MySQL: Системы управления базами данных

• Хостинг
"""

var phpProgram2 = """
• Основы Linux

    ◦ Установка Ubuntu

    ◦ Серверная и десктопная версия

    ◦ Базовые команды Linux

    ◦ Установка веб сервера Nginx

    ◦ Установка PHP

• Git основы

    ◦ Установка и настройка

    ◦ Команды Git

    ◦ Обзор GitHub, GitLab и Bitbucket

    ◦ Создание проекта и заливка на GitHub

• Composer

• Стандарты PSR

• Отладка, предупреждение ошибок, профилирование, оптимизация

• Тестирование
"""

var pythonProgram1 = """
• Зачем нужны компьютерные программы?

    ◦ Программирование как творческий процесс

    ◦ Архитектура компьютера

    ◦ В чем суть программирования?

    ◦ Процесс «общения» с Python

    ◦ Интерпретатор и компилятор

• Переменные, выражения и инструкции Python

    ◦ Понятие «значение» и «тип»

    ◦ Переменные

    ◦ Имена переменных и ключевые (зарезервированные) слова

    ◦ Операторы

    ◦ Операторы и операнд

• Основы работы с системой контроля версий

• Функции и модули

    ◦ Вызов функции

    ◦ Встроенные функции

    ◦ Функции приведения типов

    ◦ Случайные числа

    ◦ Математические функции

• Элементы функционального программирования

• Объектно-ориентированное программирование
"""

var pythonProgram2 = """
• Функции

    ◦ Встроенные контейнеры

    ◦ Операторы контроля выполнения

    ◦ Обработка ошибок (try ... except ...)

    ◦ Операторы циклов

    ◦ Comprehensions (list, dict, set)

    ◦ Создание функции и процедур

• Объектно-ориентированный подход

    ◦ Объявление класса и создание экземпляра

    ◦ Принципы ООП (подражание, инкапсуляция, полиморфизм) в Python

    ◦ Область видимости (Namespaces, Scope, правило LEGB)

• Управление созданием экземпляров класса

    ◦ Doc strings

    ◦ Meta-классы

    ◦ Abstract Bases-классы

• Приемы объектно-ориентированного программирования

• Многопоточность в Python

• Процессы в Python

• Асинхронное программирование
"""

var pythonProgram3 = """
• Введение в машинного обучения и Data science

    ◦ Определение машинного обучения и науки о данных, их задачи

    ◦ Инструментарий для анализа данных: языки программирования Python и R

    ◦ Типы машинного обучения

    ◦ Составные части модели машинного обучения

    ◦ Базовые концепты машинного обучения

• Основы языка программирования Python

    ◦ Интерпретатор Python и запуск программ.

    ◦ Семантика языка.

    ◦ Типы данных.

    ◦ Структуры данных.

• Функциональное программирование в Python

• Базовые регрессионные модели

• Введение в Big Data

• Практикум по пути улучшения качества моделей
"""
var cProgram1 = """
• Знакомство с платформой .NET и языком программирования C#

    ◦ Обзор платформы .NET Framework

    ◦ Знакомство c языком C#

    ◦ Обзор возможностей языка

• Типы данных

    ◦ Устройство памяти в компьютере

    ◦ Системы счисления

    ◦ Как хранятся данные в памяти

    ◦ Понятие переменной

• Структуры. Перечисления

    ◦ Понятие структур и необходимость в них

    ◦ Создание структур и работа с ними

    ◦ Отличия структур от классов

    ◦ Понятие перечислений

    ◦ Область применения перечислений

• Исключительные ситуации
"""

var cProgram2 = """
• Коллекции

    ◦ Основные типы сложных структур данных: список, очередь, стек, словарь, множество

    ◦ Интерфейсы, которые поддерживаются различными коллекциями

• Работа с системой контроля версий

• Делегаты, события, Лямбда-выражения

    ◦ Понятие делегата

    ◦ Объявление делегатов

    ◦ Анонимные методы

    ◦ Лямбда-выражения

    ◦ События

• LINQ
"""

var qaProgram1 = """
• Введение в тестирование ПО.

    ◦ Что такое тестирование. Для чего нужно тестирование программного обеспечения

    ◦ Жизненный цикл разработки ПО

• Понятие дефекта.

    ◦ Что такое баг

    ◦ Зачем и где описывать Bug report

    ◦ Что такое severity и priority

    ◦ Жизненный цикл дефекта

• Методологии тестирования.

    ◦ Проектная команда. Виды методологий тестирования программного обеспечения

    ◦ Водопадная модель

    ◦ V-модель

    ◦ Итеративная модель
"""

var qaProgram2 = """
• Основные понятия BDD, TDD, ATDD

    ◦ Введение в Gherkin синтаксис

    ◦ Практические упражнения по написанию Сценариев

• Введение в HTML - язык разметки гипертекста

    ◦ Стандарт HTML. Структура HTML-документа

    ◦ Создание HTML-документа

    ◦ Создание гиперссылок

    ◦ Списки и таблицы

• Введение в CSS

    ◦ Типы стилей

    ◦ Базовый синтаксис CSS

    ◦ Селекторы тегов

• Automation Testing basics
"""

var webDesignProgram1 = """
• Основы UX

    ◦ Что такое UX?

    ◦ Бизнес цели и цели пользователя

    ◦ Процесс разработки продукта

    ◦ 5 основных составляющих UX

• Психология пользователя

    ◦ Опыт пользователя

    ◦ Точка зрения пользователя

    ◦ Рефлексы

    ◦ Убеждения

• Моделирование поведения

    ◦ Пользовательское исследование

    ◦ Создание профиля пользователя

• Проектирование
"""

var webDesignProgram2 = """
• Введение в курс UI

    ◦ Этапы разработки продукта

    ◦ Понятие UX/UI/GUI

• Технические требования

    ◦ Настройки графических редакторов для создания макетов для Web

    ◦ Подготовка макетов для верстки

    ◦ Подготовка графических элементов

• Дизайн мышление

    ◦ Создание настроения проекта (Moodboard)

    ◦ Скетчбук

    ◦ Вдохновение

    ◦ Генерация креативных идей

• Композиция

    ◦ Золотое сечение

    ◦ Контраст и нюанс

    ◦ Статика и динамика

    ◦ Акцент
"""

var projectManagementProgram1 = """
• Знакомство с Agile

    ◦ Виды жизненных циклов проектов, их плюсы и минусы

    ◦ В каких проектах хорошо работают agile-подходы

    ◦ Специфика и эффект гибкого проекта

    ◦ Бизнес-кейс проекта и выбор подхода к его организации (практика)

    ◦ Обзор сертификаций по agile/scrum

• Agile мировоззрение

    ◦ Быть и делать agile: правильный подход к применению agile

    ◦ Что такое «гибкое мировоззрение»

    ◦ Agile manifesto: ценности и принципы гибких подходов

    ◦ Оценка гибкости компании (практика)

• Виды гибких практик

    ◦ Основы экстремального программирования

    ◦ Организация проекта по канбану

    ◦ Обзор скрам-фреймворка
"""

var managementProgram1 = """
• Введение в бизнес анализ. Коммуникация

    ◦ Знакомство и согласование ожиданий группы

    ◦ Понятие бизнес-анализа

    ◦ Роль бизнес-аналитика

    ◦ Взаимодействие с рабочей группой

• Планирование работ. UML моделирование. Workshop

    ◦ Планирование и подготовка работы

    ◦ Разработка архитектуры требований

    ◦ Жизненный цикл ИТ-проекта

    ◦ Сбор требований

• UML Advanced.

    ◦ Sequence Diagram

    ◦ Другие виды UML-диаграмм

    ◦ Бизнес процессы и их выявление

    ◦ Нотации для описания бизнес-процессов
"""

var dataScienceProgram1 = """
• Введение в машинного обучения и Data science

    ◦ Определение машинного обучения и науки о данных, их задачи

    ◦ Инструментарий для анализа данных: языки программирования Python и R

    ◦ Типы машинного обучения

    ◦ Составные части модели машинного обучения

    ◦ Базовые концепты машинного обучения

• Основы языка программирования Python

    ◦ Интерпретатор Python и запуск программ.

    ◦ Семантика языка.

    ◦ Типы данных.

    ◦ Структуры данных.

    ◦ Операторы контроля исполнения (разветвления и циклов).

• Функциональное программирование в Python
"""

var dataScienceProgram2 = """
• Общие сведения о интеллектуальный анализ данных (ИАД) и машинное обучение

• Методы и алгоритмы классификации

• Методы и алгоритмы кластеризации

• Методы и алгоритмы построения ассоциативных правил. Секвенциальный анализ

• Ансамбли моделей ИАД

• Методы и алгоритмы анализа текстовой информации (text mining)
"""

var devOpsProgram1 = """
• Вступление в DevOps

    ◦ Область ответственности

    ◦ Область знаний

    ◦ Проблемы

    ◦ PMI vs Agile

    ◦ ITSM vs Scrum

    ◦ Jira & Confluence

• Git

    ◦ Почему VCS и почему Git

    ◦ Принципы хранения данных

    ◦ Установка

    ◦ Конфигурация

    ◦ Происхождение

    ◦ Филиалы

    ◦ Поток Git

    ◦ Рабочие процессы на основе транзакций

    ◦ Запросы на выбор

    ◦ Конфликты

    ◦ Крючки

    ◦ Клиенты GUI

• AWS
"""

var digitalMarketingProgram1 = """
• Введение в digital

    ◦ Отличия digital от других традиционных медиа

    ◦ Тренды digital в мире и Украине

    ◦ Влияние Интернета на трансформацию бизнес процессов

• Введение в стратегию

    ◦ Что такое стратегия, ее этапы

    ◦ Типология целей, цикл планирования

    ◦ Как правильно выбрать направление и цели

    ◦ Кто такой digital-стратег, его функции

• Фреймворки создания digital-стратегии

    ◦ Digital Engagement Framework

    ◦ 5W Framework

• Инструменты и источники данных для анализа: рынок, конкуренты, целевая аудитория, тренды
"""

var digitalMarketingProgram2 = """
• Введение в e-mail-маркетинг

    ◦ Зачем бизнесу нужен e-mail-маркетинг?

    ◦ Выбор сервиса рассылок

    ◦ Как не попасть в спам?

    ◦ Какую рассылку выбрать: ручную или автоматическую?

• Сбор базы для рассылки

    ◦ Где взять подписчиков?

    ◦ Инструменты сбора подписчиков и сервисы

    ◦ Превращаем посетителей сайта в подписчиков

    ◦ Как получить подписчиков из оффлайн каналов

    ◦ Виды форм подписок и где их размещать

    ◦ Что такое лид магнит и как с ним работать

    ◦ Как проводить правильные эксперименты при сборе контактов на сайте

• Сегментация: отправляем правильные письма правильным людям
"""

var gameDevelopmentProgram1 = """
• Гейм дизайнер работает с бумагой

    ◦ Определение понятия геймдизайна как рода деятельности.

    ◦ Навыки, которыми должен обладать гейм дизайнер.

    ◦ Что делает гейм дизайнер. Определение опыта, создаваемого гейм-дизайнером

• Что такое игра?

    ◦ Что такое игры. Чем игры отличаются от игрушек.

    ◦ Фан - что это.

    ◦ Игровые жанры.

    ◦ Игровые платформы.

• Из чего состоит игра

    ◦ Составные части игры - четыре основных элемента.

    ◦ Основные игровые элементы.

    ◦ Влияние игровых элементов на создаваемый опыт.
"""

var iosProgram1 = """
• Общие сведения и настройки для разработки

    ◦ Введение. Документация Apple

    ◦ Среда разработки Xcode. Настройка симуляторов устройств

    ◦ Создание проекта

• Общие приемы ООП

    ◦ Шаблоны проектирования

    ◦ Обобщение и параметризация

• Изучение языка Swift

    ◦ Основные сведения о языке. синтаксис

    ◦ Операторы

    ◦ Строки и символы

    ◦ Коллекции

    ◦ Управленческие структуры

• ООП в Swift

    ◦ Свойства и методы

    ◦ Наследование и инкапсуляция

    ◦ Жизненный цикл объектов

    ◦ Механизмы управления памятью

    ◦ Протоколы, категории

• Работа с ресурсами

    ◦ Строки, локализация

    ◦ Изображения

• Работа с коллекциями

    ◦ Наборы (Set)

    ◦ Массивы (Array)

    ◦ Словари (Dictionary)

• Поток
"""

var iosProgram2 = """
• Детальное изучение сложных предустановленных шаблонов iOS-проектов

    ◦ Page-Based Application

    ◦ Tabbed Application

    ◦ Master-Detail Application

• Фоновое режим работы приложения

    ◦ Background Modes, Background Fetch

• CoreDada

    ◦ Общие принципы и включение механизма в проект

    ◦ Модели и связи.

    ◦ Запись и чтение данных

• Работа с системой контроля версий

    ◦ Networking

    ◦ Загрузка и отображение Web-страницы. Графический элемент UIWebView. Основы HTML

    ◦ Класс NSURLConnection. Основные принципы передачи данных. Загрузка файла.

    ◦ HTTP-протокол. GET-, POST-, Multipart-запросы. Формат JSON
"""

var androidProgram1 = """
• Введение

    ◦ Основные понятия и концепции в Android

    ◦ Установка Android SDK

    ◦ Установка Android Studio

• Основные понятия технологий для удобной работы

• Введение в XML

    ◦ Шаблоны - заготовки проектов

    ◦ Контейнеры

    ◦ LinearLayot

    ◦ RelativeLayout

    ◦ FrameLayout

    ◦ СonstraintLayout - почему это заменит все

• Основные View

    ◦ Button, ImageView, TextView, ListView

• Сложные элементы

    ◦ RecyclerView - Adapter, ViewHolder

    ◦ Почему лучше использовать RecyclerView. Его преимущества и недостатки

    ◦ ViewPager + TabLayout
"""

var androidProgram2 = """
• Библиотека Moxy

• Фоновая работа приложений. Сервисы Services

    ◦ Запуск и завершение работы сервисов. Жизненный цикл сервиса

    ◦ Синхронная работа сервисов

    ◦ Взаимодейтствие сервиса и активностей. Привязка сервисов

• Регистраторы системных событий BroascastReceiver

• Internet

    ◦ Формат JSON. Json-парсер

    ◦ Типы HTTP-запросов. GET-запрос. POST-запрос
"""

var cybersecurityProgram1 = """
• Основные вызовы и угрозы IT-инфраструктуры

    ◦ Жизненный цикл кибернетических атак

    ◦ Понятие Vulnerability, Threat, Attack

    ◦ Типы кибернетических атак / угроз: DoS (DDoS), Reconnaissance, Phishing, MITM, Social engineering, Malware, Injections, Spoofing (Impersonification), Sniffing

• Основы криптографии

    ◦ Типы криптографических систем. Отличия. Преимущества, недостатки

    ◦ Методы шифрования данных в симметричных криптосистемах

    ◦ Хеширование

    ◦ Электронная цифровая подпись

    ◦ Механизмы согласования ключей шифрования

    ◦ Инфраструктура открытых ключей (PKI)

    ◦ Сетевые протоколы шифрования при передаче данных
"""



